gii生成的文件如果不需要，记得要清理，以防产生漏洞

涉及到页面格式的代码最好不要写在模型

自定义小部件是用来解决视图中的代码重用问题，例如多个页面共有的小模块。detailview、listview、gridview是已经写好的小部件

关于缓存
    数据缓存：无
    片段缓存:可以设置动态内容+依赖+变化（根据一些参数的更改而变化）
    页面缓存:可以设置依赖+变化（根据一些参数的更改而变化）
    http缓存:利用客户端来缓存，Last-Modified(最后修改时间)、Etag(内容修改)、Cache-Control(指定页面的常规缓存策略,如：时间)


控制器
	控制器动作类：共用一些功能相同的action，方便调用。覆盖控制器类的actions() 方法即可。当然也可以写在common模块
    控制器最佳实践：在设计良好的应用中，控制器很精练，包含的操作代码简短； 如果你的控制器很复杂，通常意味着需要重构， 转移一些代码到其他类中。
	过滤器：滤器本质上是一类特殊的 行为。更直白的说，每个过滤器就是覆盖beforeAction和afterAction。可被配置在控制器动作执行 “之前或之后” 执行，一个动作可以有多个过滤器。覆盖 CController::filters() 方法。例如，身份验证、性能检测
        过滤器实现有两种方式：1、跟使用行为一样；2、覆盖filters方法
        访问控制过滤器:例如只允许post、是否登录
        性能过滤器：可用于衡量操作执行所花费的时间
        自己想的场景：是否登录、权限控制、日志
        AccessControl 提供基于 rules 规则的访问控制
        认证方法过滤器通过 HTTP Basic Auth 或 OAuth 2 来认证一个用户，通常在实现 RESTful API中使用
        HttpCache 利用 Last-Modified 和 Etag HTTP 头实现客户端缓存
        VerbFilter 检查请求动作的 HTTP 请求方式是否允许执行

模型
	表单模型；主要是表单验证、配合视图、
		表单生成器
		scenario
		安全的特性赋值
	AR：CURD操作、字段翻译、验证。就是ORM，又find、one、all等方法
	    与AQ关系：AR的find()返回的是AQ对象，所以可以使用AQ的所有方法
	关系型 Active Record：表关联

数据访问对象（DAO）：相当于原生PDO
Query Builder：链式操作吧，优化了DAO需要些sql
数据库迁移：表结构等语句也进行追踪，并且可以回滚

yii几种操作数据库的方式：
1、yii\db\Command：pdo的封装，有insert、queryOne、query等，可直接执行sql，也可调用insert、update
2、Yii::$app->db：返回yii\db\Command，有事务
3、QueryBuilder：生成sql语句
4、Query：会使用到QueryBuilder + createCommand，有one、all、exists等链式操作，不用写sql
5、ActiveQuery：继承Query，多了joinWith、andOnCondition，大致与Query一样
6、ActiveRecord：主要有 save、delete、findOne、findAll，(find、findBySql)，find和findBySql返回ActiveQuery对象
	AR其实就是orm，类对应表，对象对应行，属性对应字段，及数据表和类进行映射

关于注入，有以下5种条件，1、2能被注入，要小心；3、4推荐使用；5一般不用
1、sql
2、字符串格式，例如：'status=1'
3、哈希格式，例如： ['status' => 1, 'type' => 2]
4、操作符格式，例如：['like', 'name', 'test']
5、对象格式，例如：new LikeCondition('name', 'LIKE', 'test')


视图
	小物件:主要用于表现数据的组件，例如日期
	布局：header、footer

路由

安全相关



组件：Yii 应用建立于组件之上，每个组件实现一特定功能。例如，urlManager组件负责处理网页请求路由到对应的控制器、db组件提供数据库相关服务等等。（感觉有点像服务）
	组件属性：支持基于类内的 getter 和 setter，与普通属性区别是： 当这种属性被读写取时，对应的 getter、setter 方法将被调用
	组件事件：事件可以将自定义代码“注入”到现有代码中的特定执行点。 附加自定义代码到某个事件，当这个事件被触发时，这些代码就会自动执行，相当于钩子
	组件行为：1、可以通过注入方式无须改变类继承关系即可增强一个已有的 组件 类功能。 2、能响应被触发的事件
	    附加行为的方式：1、静态（更常见）覆盖behavios 方法；2、动态
	    哪些类可以附加行为：1、组件；2、ActiveQuery和ActiveRecord都可以（大概是继承了Component 的都可）

Behavior：无需修改，也无需改变继承关系，就可以扩展某个类(模型、控制器)。有点像trait。行为是对功能的扩展。特点：不在类中添加任何一行代码，进行扩展
事件：事件可以将自定义代码“注入”到现有代码中的特定执行点。 附加自定义代码到某个事件，当这个事件被触发时，这些代码就会自动执行。（相当于观察者模式）
    场景：1、用户注册后，发送验证邮件。2、记录日志

导入目录，使用第三方扩展:

控制台命令：

gii：

日志：

scenario：场景

错误管理：

性能调优：
	打印sql、请求时间、trace

开发规范：
	命名变量、函数和类时使用 驼峰风格
	对私有类成员变量加 _
	推荐使用单数表名

开发流程
	创建目录结构骨架，可以用yiic工具
	配置此 应用，修改配置文件、部署必要组件
	为每个表创建一个AR
	为每个类型的用户请求 创建一个 控制器 类
	实现 动作 和他们相应的 视图
	如果需要 国际化（I18N） ，创建翻译信息
	最终 调整 与部署

最佳实践
	前端：一个面向最终用户的公开网站；
	后端：一个实现管理功能的应用。这通常仅限管理组使用；
	终端：一个运行于终端窗口或用以支撑整个应用的计划任务的终端命令应用。
	Web API：提供一系列Web接口用以整合第三方应用。

验证器类型：(搜索BooleanValidator)
D:\wamp64\www\advance\vendor\yiisoft\yii2\validators\Validator.php


待完善：
更完美的RBAC
Menu小部件
redis
memcache
事件
hook
mq